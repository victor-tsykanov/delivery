// Code generated by mockery v2.52.3. DO NOT EDIT.

package eventserializers

import (
	ddd "github.com/victor-tsykanov/delivery/internal/common/ddd"

	mock "github.com/stretchr/testify/mock"
)

// MockIRegistry is an autogenerated mock type for the IRegistry type
type MockIRegistry struct {
	mock.Mock
}

type MockIRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRegistry) EXPECT() *MockIRegistry_Expecter {
	return &MockIRegistry_Expecter{mock: &_m.Mock}
}

// Deserialize provides a mock function with given fields: eventType, data
func (_m *MockIRegistry) Deserialize(eventType string, data []byte) (ddd.IDomainEvent, error) {
	ret := _m.Called(eventType, data)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 ddd.IDomainEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (ddd.IDomainEvent, error)); ok {
		return rf(eventType, data)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) ddd.IDomainEvent); ok {
		r0 = rf(eventType, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddd.IDomainEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(eventType, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRegistry_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type MockIRegistry_Deserialize_Call struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//   - eventType string
//   - data []byte
func (_e *MockIRegistry_Expecter) Deserialize(eventType interface{}, data interface{}) *MockIRegistry_Deserialize_Call {
	return &MockIRegistry_Deserialize_Call{Call: _e.mock.On("Deserialize", eventType, data)}
}

func (_c *MockIRegistry_Deserialize_Call) Run(run func(eventType string, data []byte)) *MockIRegistry_Deserialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockIRegistry_Deserialize_Call) Return(_a0 ddd.IDomainEvent, _a1 error) *MockIRegistry_Deserialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRegistry_Deserialize_Call) RunAndReturn(run func(string, []byte) (ddd.IDomainEvent, error)) *MockIRegistry_Deserialize_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields: event
func (_m *MockIRegistry) Serialize(event ddd.IDomainEvent) ([]byte, error) {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(ddd.IDomainEvent) ([]byte, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(ddd.IDomainEvent) []byte); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(ddd.IDomainEvent) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRegistry_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockIRegistry_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
//   - event ddd.IDomainEvent
func (_e *MockIRegistry_Expecter) Serialize(event interface{}) *MockIRegistry_Serialize_Call {
	return &MockIRegistry_Serialize_Call{Call: _e.mock.On("Serialize", event)}
}

func (_c *MockIRegistry_Serialize_Call) Run(run func(event ddd.IDomainEvent)) *MockIRegistry_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ddd.IDomainEvent))
	})
	return _c
}

func (_c *MockIRegistry_Serialize_Call) Return(_a0 []byte, _a1 error) *MockIRegistry_Serialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRegistry_Serialize_Call) RunAndReturn(run func(ddd.IDomainEvent) ([]byte, error)) *MockIRegistry_Serialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRegistry creates a new instance of MockIRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRegistry {
	mock := &MockIRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
