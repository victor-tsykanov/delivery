// Code generated by mockery v2.52.3. DO NOT EDIT.

package outbox

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	outbox "github.com/victor-tsykanov/delivery/internal/adapters/out/postgres/outbox"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, message
func (_m *MockIRepository) Create(ctx context.Context, message *outbox.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *outbox.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - message *outbox.Message
func (_e *MockIRepository_Expecter) Create(ctx interface{}, message interface{}) *MockIRepository_Create_Call {
	return &MockIRepository_Create_Call{Call: _e.mock.On("Create", ctx, message)}
}

func (_c *MockIRepository_Create_Call) Run(run func(ctx context.Context, message *outbox.Message)) *MockIRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*outbox.Message))
	})
	return _c
}

func (_c *MockIRepository_Create_Call) Return(_a0 error) *MockIRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_Create_Call) RunAndReturn(run func(context.Context, *outbox.Message) error) *MockIRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindUnprocessed provides a mock function with given fields: limit
func (_m *MockIRepository) FindUnprocessed(limit int) ([]*outbox.Message, bool, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for FindUnprocessed")
	}

	var r0 []*outbox.Message
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(int) ([]*outbox.Message, bool, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []*outbox.Message); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*outbox.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIRepository_FindUnprocessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUnprocessed'
type MockIRepository_FindUnprocessed_Call struct {
	*mock.Call
}

// FindUnprocessed is a helper method to define mock.On call
//   - limit int
func (_e *MockIRepository_Expecter) FindUnprocessed(limit interface{}) *MockIRepository_FindUnprocessed_Call {
	return &MockIRepository_FindUnprocessed_Call{Call: _e.mock.On("FindUnprocessed", limit)}
}

func (_c *MockIRepository_FindUnprocessed_Call) Run(run func(limit int)) *MockIRepository_FindUnprocessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIRepository_FindUnprocessed_Call) Return(_a0 []*outbox.Message, _a1 bool, _a2 error) *MockIRepository_FindUnprocessed_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIRepository_FindUnprocessed_Call) RunAndReturn(run func(int) ([]*outbox.Message, bool, error)) *MockIRepository_FindUnprocessed_Call {
	_c.Call.Return(run)
	return _c
}

// MarkProcessed provides a mock function with given fields: ctx, id
func (_m *MockIRepository) MarkProcessed(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkProcessed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_MarkProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkProcessed'
type MockIRepository_MarkProcessed_Call struct {
	*mock.Call
}

// MarkProcessed is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIRepository_Expecter) MarkProcessed(ctx interface{}, id interface{}) *MockIRepository_MarkProcessed_Call {
	return &MockIRepository_MarkProcessed_Call{Call: _e.mock.On("MarkProcessed", ctx, id)}
}

func (_c *MockIRepository_MarkProcessed_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIRepository_MarkProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIRepository_MarkProcessed_Call) Return(_a0 error) *MockIRepository_MarkProcessed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_MarkProcessed_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockIRepository_MarkProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
