// Code generated by mockery v2.52.3. DO NOT EDIT.

package ddd

import (
	mock "github.com/stretchr/testify/mock"
	ddd "github.com/victor-tsykanov/delivery/internal/common/ddd"
)

// MockIAggregateRoot is an autogenerated mock type for the IAggregateRoot type
type MockIAggregateRoot struct {
	mock.Mock
}

type MockIAggregateRoot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAggregateRoot) EXPECT() *MockIAggregateRoot_Expecter {
	return &MockIAggregateRoot_Expecter{mock: &_m.Mock}
}

// ClearDomainEvents provides a mock function with no fields
func (_m *MockIAggregateRoot) ClearDomainEvents() {
	_m.Called()
}

// MockIAggregateRoot_ClearDomainEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearDomainEvents'
type MockIAggregateRoot_ClearDomainEvents_Call struct {
	*mock.Call
}

// ClearDomainEvents is a helper method to define mock.On call
func (_e *MockIAggregateRoot_Expecter) ClearDomainEvents() *MockIAggregateRoot_ClearDomainEvents_Call {
	return &MockIAggregateRoot_ClearDomainEvents_Call{Call: _e.mock.On("ClearDomainEvents")}
}

func (_c *MockIAggregateRoot_ClearDomainEvents_Call) Run(run func()) *MockIAggregateRoot_ClearDomainEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAggregateRoot_ClearDomainEvents_Call) Return() *MockIAggregateRoot_ClearDomainEvents_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIAggregateRoot_ClearDomainEvents_Call) RunAndReturn(run func()) *MockIAggregateRoot_ClearDomainEvents_Call {
	_c.Run(run)
	return _c
}

// DomainEvents provides a mock function with no fields
func (_m *MockIAggregateRoot) DomainEvents() []ddd.IDomainEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DomainEvents")
	}

	var r0 []ddd.IDomainEvent
	if rf, ok := ret.Get(0).(func() []ddd.IDomainEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ddd.IDomainEvent)
		}
	}

	return r0
}

// MockIAggregateRoot_DomainEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainEvents'
type MockIAggregateRoot_DomainEvents_Call struct {
	*mock.Call
}

// DomainEvents is a helper method to define mock.On call
func (_e *MockIAggregateRoot_Expecter) DomainEvents() *MockIAggregateRoot_DomainEvents_Call {
	return &MockIAggregateRoot_DomainEvents_Call{Call: _e.mock.On("DomainEvents")}
}

func (_c *MockIAggregateRoot_DomainEvents_Call) Run(run func()) *MockIAggregateRoot_DomainEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAggregateRoot_DomainEvents_Call) Return(_a0 []ddd.IDomainEvent) *MockIAggregateRoot_DomainEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAggregateRoot_DomainEvents_Call) RunAndReturn(run func() []ddd.IDomainEvent) *MockIAggregateRoot_DomainEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAggregateRoot creates a new instance of MockIAggregateRoot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAggregateRoot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAggregateRoot {
	mock := &MockIAggregateRoot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
