// Code generated by mockery v2.52.3. DO NOT EDIT.

package out

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	order "github.com/victor-tsykanov/delivery/internal/core/domain/model/order"
)

// MockIOrderRepository is an autogenerated mock type for the IOrderRepository type
type MockIOrderRepository struct {
	mock.Mock
}

type MockIOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOrderRepository) EXPECT() *MockIOrderRepository_Expecter {
	return &MockIOrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockIOrderRepository) Create(ctx context.Context, _a1 *order.Order) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIOrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIOrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *order.Order
func (_e *MockIOrderRepository_Expecter) Create(ctx interface{}, _a1 interface{}) *MockIOrderRepository_Create_Call {
	return &MockIOrderRepository_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockIOrderRepository_Create_Call) Run(run func(ctx context.Context, _a1 *order.Order)) *MockIOrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.Order))
	})
	return _c
}

func (_c *MockIOrderRepository_Create_Call) Return(_a0 error) *MockIOrderRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIOrderRepository_Create_Call) RunAndReturn(run func(context.Context, *order.Order) error) *MockIOrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAssigned provides a mock function with given fields: ctx
func (_m *MockIOrderRepository) FindAssigned(ctx context.Context) ([]*order.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAssigned")
	}

	var r0 []*order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*order.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*order.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOrderRepository_FindAssigned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAssigned'
type MockIOrderRepository_FindAssigned_Call struct {
	*mock.Call
}

// FindAssigned is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIOrderRepository_Expecter) FindAssigned(ctx interface{}) *MockIOrderRepository_FindAssigned_Call {
	return &MockIOrderRepository_FindAssigned_Call{Call: _e.mock.On("FindAssigned", ctx)}
}

func (_c *MockIOrderRepository_FindAssigned_Call) Run(run func(ctx context.Context)) *MockIOrderRepository_FindAssigned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIOrderRepository_FindAssigned_Call) Return(_a0 []*order.Order, _a1 error) *MockIOrderRepository_FindAssigned_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIOrderRepository_FindAssigned_Call) RunAndReturn(run func(context.Context) ([]*order.Order, error)) *MockIOrderRepository_FindAssigned_Call {
	_c.Call.Return(run)
	return _c
}

// FindNew provides a mock function with given fields: ctx
func (_m *MockIOrderRepository) FindNew(ctx context.Context) ([]*order.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindNew")
	}

	var r0 []*order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*order.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*order.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOrderRepository_FindNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindNew'
type MockIOrderRepository_FindNew_Call struct {
	*mock.Call
}

// FindNew is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIOrderRepository_Expecter) FindNew(ctx interface{}) *MockIOrderRepository_FindNew_Call {
	return &MockIOrderRepository_FindNew_Call{Call: _e.mock.On("FindNew", ctx)}
}

func (_c *MockIOrderRepository_FindNew_Call) Run(run func(ctx context.Context)) *MockIOrderRepository_FindNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIOrderRepository_FindNew_Call) Return(_a0 []*order.Order, _a1 error) *MockIOrderRepository_FindNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIOrderRepository_FindNew_Call) RunAndReturn(run func(context.Context) ([]*order.Order, error)) *MockIOrderRepository_FindNew_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockIOrderRepository) Get(ctx context.Context, id order.ID) (*order.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, order.ID) (*order.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, order.ID) *order.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, order.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOrderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIOrderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id order.ID
func (_e *MockIOrderRepository_Expecter) Get(ctx interface{}, id interface{}) *MockIOrderRepository_Get_Call {
	return &MockIOrderRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockIOrderRepository_Get_Call) Run(run func(ctx context.Context, id order.ID)) *MockIOrderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(order.ID))
	})
	return _c
}

func (_c *MockIOrderRepository_Get_Call) Return(_a0 *order.Order, _a1 error) *MockIOrderRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIOrderRepository_Get_Call) RunAndReturn(run func(context.Context, order.ID) (*order.Order, error)) *MockIOrderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *MockIOrderRepository) Update(ctx context.Context, _a1 *order.Order) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIOrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIOrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *order.Order
func (_e *MockIOrderRepository_Expecter) Update(ctx interface{}, _a1 interface{}) *MockIOrderRepository_Update_Call {
	return &MockIOrderRepository_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *MockIOrderRepository_Update_Call) Run(run func(ctx context.Context, _a1 *order.Order)) *MockIOrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.Order))
	})
	return _c
}

func (_c *MockIOrderRepository_Update_Call) Return(_a0 error) *MockIOrderRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIOrderRepository_Update_Call) RunAndReturn(run func(context.Context, *order.Order) error) *MockIOrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIOrderRepository creates a new instance of MockIOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOrderRepository {
	mock := &MockIOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
