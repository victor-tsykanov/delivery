// Code generated by mockery v2.52.3. DO NOT EDIT.

package out

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kernel "github.com/victor-tsykanov/delivery/internal/core/domain/kernel"
)

// MockIGeoClient is an autogenerated mock type for the IGeoClient type
type MockIGeoClient struct {
	mock.Mock
}

type MockIGeoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIGeoClient) EXPECT() *MockIGeoClient_Expecter {
	return &MockIGeoClient_Expecter{mock: &_m.Mock}
}

// GetLocation provides a mock function with given fields: ctx, street
func (_m *MockIGeoClient) GetLocation(ctx context.Context, street string) (*kernel.Location, error) {
	ret := _m.Called(ctx, street)

	if len(ret) == 0 {
		panic("no return value specified for GetLocation")
	}

	var r0 *kernel.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*kernel.Location, error)); ok {
		return rf(ctx, street)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *kernel.Location); ok {
		r0 = rf(ctx, street)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kernel.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, street)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIGeoClient_GetLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocation'
type MockIGeoClient_GetLocation_Call struct {
	*mock.Call
}

// GetLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - street string
func (_e *MockIGeoClient_Expecter) GetLocation(ctx interface{}, street interface{}) *MockIGeoClient_GetLocation_Call {
	return &MockIGeoClient_GetLocation_Call{Call: _e.mock.On("GetLocation", ctx, street)}
}

func (_c *MockIGeoClient_GetLocation_Call) Run(run func(ctx context.Context, street string)) *MockIGeoClient_GetLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIGeoClient_GetLocation_Call) Return(_a0 *kernel.Location, _a1 error) *MockIGeoClient_GetLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIGeoClient_GetLocation_Call) RunAndReturn(run func(context.Context, string) (*kernel.Location, error)) *MockIGeoClient_GetLocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIGeoClient creates a new instance of MockIGeoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIGeoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIGeoClient {
	mock := &MockIGeoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
